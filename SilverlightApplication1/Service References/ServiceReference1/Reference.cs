//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SilverlightApplication1.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ToDoItem", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    public partial class ToDoItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte[] BytesField;
        
        private char CharValueField;
        
        private System.DateTime CreationDateField;
        
        private string DescriptionField;
        
        private System.Guid IdField;
        
        private SilverlightApplication1.ServiceReference1.ToDoImportance ImportanceField;
        
        private System.Nullable<int> NullableTest1Field;
        
        private System.Nullable<int> NullableTest2Field;
        
        private System.Nullable<System.DateTime> NullableTest3Field;
        
        private System.Nullable<System.DateTime> NullableTest4Field;
        
        private System.Collections.ObjectModel.ObservableCollection<string> TagsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Bytes {
            get {
                return this.BytesField;
            }
            set {
                if ((object.ReferenceEquals(this.BytesField, value) != true)) {
                    this.BytesField = value;
                    this.RaisePropertyChanged("Bytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char CharValue {
            get {
                return this.CharValueField;
            }
            set {
                if ((this.CharValueField.Equals(value) != true)) {
                    this.CharValueField = value;
                    this.RaisePropertyChanged("CharValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightApplication1.ServiceReference1.ToDoImportance Importance {
            get {
                return this.ImportanceField;
            }
            set {
                if ((this.ImportanceField.Equals(value) != true)) {
                    this.ImportanceField = value;
                    this.RaisePropertyChanged("Importance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> NullableTest1 {
            get {
                return this.NullableTest1Field;
            }
            set {
                if ((this.NullableTest1Field.Equals(value) != true)) {
                    this.NullableTest1Field = value;
                    this.RaisePropertyChanged("NullableTest1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> NullableTest2 {
            get {
                return this.NullableTest2Field;
            }
            set {
                if ((this.NullableTest2Field.Equals(value) != true)) {
                    this.NullableTest2Field = value;
                    this.RaisePropertyChanged("NullableTest2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> NullableTest3 {
            get {
                return this.NullableTest3Field;
            }
            set {
                if ((this.NullableTest3Field.Equals(value) != true)) {
                    this.NullableTest3Field = value;
                    this.RaisePropertyChanged("NullableTest3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> NullableTest4 {
            get {
                return this.NullableTest4Field;
            }
            set {
                if ((this.NullableTest4Field.Equals(value) != true)) {
                    this.NullableTest4Field = value;
                    this.RaisePropertyChanged("NullableTest4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ToDoImportance", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    public enum ToDoImportance : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mid = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetToDos", ReplyAction="http://tempuri.org/IService1/GetToDosResponse")]
        System.IAsyncResult BeginGetToDos(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem> EndGetToDos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddOrUpdateToDo", ReplyAction="http://tempuri.org/IService1/AddOrUpdateToDoResponse")]
        System.IAsyncResult BeginAddOrUpdateToDo(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem, System.AsyncCallback callback, object asyncState);
        
        void EndAddOrUpdateToDo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ReplaceToDo", ReplyAction="http://tempuri.org/IService1/ReplaceToDoResponse")]
        System.IAsyncResult BeginReplaceToDo(SilverlightApplication1.ServiceReference1.ToDoItem toDoItemToReplace, SilverlightApplication1.ServiceReference1.ToDoItem newToDo, bool throwFaultExceptionIfNotFound, System.AsyncCallback callback, object asyncState);
        
        bool EndReplaceToDo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DeleteToDo", ReplyAction="http://tempuri.org/IService1/DeleteToDoResponse")]
        System.IAsyncResult BeginDeleteToDo(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteToDo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DeleteAllToDos", ReplyAction="http://tempuri.org/IService1/DeleteAllToDosResponse")]
        System.IAsyncResult BeginDeleteAllToDos(System.AsyncCallback callback, object asyncState);
        
        void EndDeleteAllToDos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetTheNumberOfToDos", ReplyAction="http://tempuri.org/IService1/GetTheNumberOfToDosResponse")]
        System.IAsyncResult BeginGetTheNumberOfToDos(System.AsyncCallback callback, object asyncState);
        
        int EndGetTheNumberOfToDos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetTheNumberOfToDosPlusX", ReplyAction="http://tempuri.org/IService1/GetTheNumberOfToDosPlusXResponse")]
        System.IAsyncResult BeginGetTheNumberOfToDosPlusX(int x, System.AsyncCallback callback, object asyncState);
        
        System.Nullable<int> EndGetTheNumberOfToDosPlusX(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetServerDate", ReplyAction="http://tempuri.org/IService1/GetServerDateResponse")]
        System.IAsyncResult BeginGetServerDate(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetServerDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/MultiplyThreeNumbers", ReplyAction="http://tempuri.org/IService1/MultiplyThreeNumbersResponse")]
        System.IAsyncResult BeginMultiplyThreeNumbers(double x1, double x2, double x3, System.AsyncCallback callback, object asyncState);
        
        double EndMultiplyThreeNumbers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RoundTripTest", ReplyAction="http://tempuri.org/IService1/RoundTripTestResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SilverlightApplication1.ServiceReference1.ToDoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SilverlightApplication1.ServiceReference1.ToDoImportance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
        System.IAsyncResult BeginRoundTripTest(object obj, System.AsyncCallback callback, object asyncState);
        
        object EndRoundTripTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RoundTripTest2", ReplyAction="http://tempuri.org/IService1/RoundTripTest2Response")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SilverlightApplication1.ServiceReference1.ToDoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SilverlightApplication1.ServiceReference1.ToDoImportance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
        System.IAsyncResult BeginRoundTripTest2(object obj, System.AsyncCallback callback, object asyncState);
        
        object EndRoundTripTest2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ReceiveFaultException", ReplyAction="http://tempuri.org/IService1/ReceiveFaultExceptionResponse")]
        System.IAsyncResult BeginReceiveFaultException(System.AsyncCallback callback, object asyncState);
        
        bool EndReceiveFaultException(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ReceiveServerInternalErrorException", ReplyAction="http://tempuri.org/IService1/ReceiveServerInternalErrorExceptionResponse")]
        System.IAsyncResult BeginReceiveServerInternalErrorException(System.AsyncCallback callback, object asyncState);
        
        bool EndReceiveServerInternalErrorException(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SilverlightApplication1.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetToDosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetToDosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReplaceToDoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReplaceToDoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTheNumberOfToDosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTheNumberOfToDosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTheNumberOfToDosPlusXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTheNumberOfToDosPlusXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MultiplyThreeNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MultiplyThreeNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoundTripTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RoundTripTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoundTripTest2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RoundTripTest2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReceiveFaultExceptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveFaultExceptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReceiveServerInternalErrorExceptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveServerInternalErrorExceptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SilverlightApplication1.ServiceReference1.IService1>, SilverlightApplication1.ServiceReference1.IService1 {
        
        private BeginOperationDelegate onBeginGetToDosDelegate;
        
        private EndOperationDelegate onEndGetToDosDelegate;
        
        private System.Threading.SendOrPostCallback onGetToDosCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOrUpdateToDoDelegate;
        
        private EndOperationDelegate onEndAddOrUpdateToDoDelegate;
        
        private System.Threading.SendOrPostCallback onAddOrUpdateToDoCompletedDelegate;
        
        private BeginOperationDelegate onBeginReplaceToDoDelegate;
        
        private EndOperationDelegate onEndReplaceToDoDelegate;
        
        private System.Threading.SendOrPostCallback onReplaceToDoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteToDoDelegate;
        
        private EndOperationDelegate onEndDeleteToDoDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteToDoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAllToDosDelegate;
        
        private EndOperationDelegate onEndDeleteAllToDosDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAllToDosCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTheNumberOfToDosDelegate;
        
        private EndOperationDelegate onEndGetTheNumberOfToDosDelegate;
        
        private System.Threading.SendOrPostCallback onGetTheNumberOfToDosCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTheNumberOfToDosPlusXDelegate;
        
        private EndOperationDelegate onEndGetTheNumberOfToDosPlusXDelegate;
        
        private System.Threading.SendOrPostCallback onGetTheNumberOfToDosPlusXCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerDateDelegate;
        
        private EndOperationDelegate onEndGetServerDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginMultiplyThreeNumbersDelegate;
        
        private EndOperationDelegate onEndMultiplyThreeNumbersDelegate;
        
        private System.Threading.SendOrPostCallback onMultiplyThreeNumbersCompletedDelegate;
        
        private BeginOperationDelegate onBeginRoundTripTestDelegate;
        
        private EndOperationDelegate onEndRoundTripTestDelegate;
        
        private System.Threading.SendOrPostCallback onRoundTripTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginRoundTripTest2Delegate;
        
        private EndOperationDelegate onEndRoundTripTest2Delegate;
        
        private System.Threading.SendOrPostCallback onRoundTripTest2CompletedDelegate;
        
        private BeginOperationDelegate onBeginReceiveFaultExceptionDelegate;
        
        private EndOperationDelegate onEndReceiveFaultExceptionDelegate;
        
        private System.Threading.SendOrPostCallback onReceiveFaultExceptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginReceiveServerInternalErrorExceptionDelegate;
        
        private EndOperationDelegate onEndReceiveServerInternalErrorExceptionDelegate;
        
        private System.Threading.SendOrPostCallback onReceiveServerInternalErrorExceptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetToDosCompletedEventArgs> GetToDosCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddOrUpdateToDoCompleted;
        
        public event System.EventHandler<ReplaceToDoCompletedEventArgs> ReplaceToDoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteToDoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteAllToDosCompleted;
        
        public event System.EventHandler<GetTheNumberOfToDosCompletedEventArgs> GetTheNumberOfToDosCompleted;
        
        public event System.EventHandler<GetTheNumberOfToDosPlusXCompletedEventArgs> GetTheNumberOfToDosPlusXCompleted;
        
        public event System.EventHandler<GetServerDateCompletedEventArgs> GetServerDateCompleted;
        
        public event System.EventHandler<MultiplyThreeNumbersCompletedEventArgs> MultiplyThreeNumbersCompleted;
        
        public event System.EventHandler<RoundTripTestCompletedEventArgs> RoundTripTestCompleted;
        
        public event System.EventHandler<RoundTripTest2CompletedEventArgs> RoundTripTest2Completed;
        
        public event System.EventHandler<ReceiveFaultExceptionCompletedEventArgs> ReceiveFaultExceptionCompleted;
        
        public event System.EventHandler<ReceiveServerInternalErrorExceptionCompletedEventArgs> ReceiveServerInternalErrorExceptionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginGetToDos(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetToDos(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem> SilverlightApplication1.ServiceReference1.IService1.EndGetToDos(System.IAsyncResult result) {
            return base.Channel.EndGetToDos(result);
        }
        
        private System.IAsyncResult OnBeginGetToDos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginGetToDos(callback, asyncState);
        }
        
        private object[] OnEndGetToDos(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem> retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndGetToDos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetToDosCompleted(object state) {
            if ((this.GetToDosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetToDosCompleted(this, new GetToDosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetToDosAsync() {
            this.GetToDosAsync(null);
        }
        
        public void GetToDosAsync(object userState) {
            if ((this.onBeginGetToDosDelegate == null)) {
                this.onBeginGetToDosDelegate = new BeginOperationDelegate(this.OnBeginGetToDos);
            }
            if ((this.onEndGetToDosDelegate == null)) {
                this.onEndGetToDosDelegate = new EndOperationDelegate(this.OnEndGetToDos);
            }
            if ((this.onGetToDosCompletedDelegate == null)) {
                this.onGetToDosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetToDosCompleted);
            }
            base.InvokeAsync(this.onBeginGetToDosDelegate, null, this.onEndGetToDosDelegate, this.onGetToDosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginAddOrUpdateToDo(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOrUpdateToDo(toDoItem, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightApplication1.ServiceReference1.IService1.EndAddOrUpdateToDo(System.IAsyncResult result) {
            base.Channel.EndAddOrUpdateToDo(result);
        }
        
        private System.IAsyncResult OnBeginAddOrUpdateToDo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightApplication1.ServiceReference1.ToDoItem toDoItem = ((SilverlightApplication1.ServiceReference1.ToDoItem)(inValues[0]));
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginAddOrUpdateToDo(toDoItem, callback, asyncState);
        }
        
        private object[] OnEndAddOrUpdateToDo(System.IAsyncResult result) {
            ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndAddOrUpdateToDo(result);
            return null;
        }
        
        private void OnAddOrUpdateToDoCompleted(object state) {
            if ((this.AddOrUpdateToDoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOrUpdateToDoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOrUpdateToDoAsync(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem) {
            this.AddOrUpdateToDoAsync(toDoItem, null);
        }
        
        public void AddOrUpdateToDoAsync(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem, object userState) {
            if ((this.onBeginAddOrUpdateToDoDelegate == null)) {
                this.onBeginAddOrUpdateToDoDelegate = new BeginOperationDelegate(this.OnBeginAddOrUpdateToDo);
            }
            if ((this.onEndAddOrUpdateToDoDelegate == null)) {
                this.onEndAddOrUpdateToDoDelegate = new EndOperationDelegate(this.OnEndAddOrUpdateToDo);
            }
            if ((this.onAddOrUpdateToDoCompletedDelegate == null)) {
                this.onAddOrUpdateToDoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateToDoCompleted);
            }
            base.InvokeAsync(this.onBeginAddOrUpdateToDoDelegate, new object[] {
                        toDoItem}, this.onEndAddOrUpdateToDoDelegate, this.onAddOrUpdateToDoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginReplaceToDo(SilverlightApplication1.ServiceReference1.ToDoItem toDoItemToReplace, SilverlightApplication1.ServiceReference1.ToDoItem newToDo, bool throwFaultExceptionIfNotFound, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReplaceToDo(toDoItemToReplace, newToDo, throwFaultExceptionIfNotFound, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightApplication1.ServiceReference1.IService1.EndReplaceToDo(System.IAsyncResult result) {
            return base.Channel.EndReplaceToDo(result);
        }
        
        private System.IAsyncResult OnBeginReplaceToDo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightApplication1.ServiceReference1.ToDoItem toDoItemToReplace = ((SilverlightApplication1.ServiceReference1.ToDoItem)(inValues[0]));
            SilverlightApplication1.ServiceReference1.ToDoItem newToDo = ((SilverlightApplication1.ServiceReference1.ToDoItem)(inValues[1]));
            bool throwFaultExceptionIfNotFound = ((bool)(inValues[2]));
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginReplaceToDo(toDoItemToReplace, newToDo, throwFaultExceptionIfNotFound, callback, asyncState);
        }
        
        private object[] OnEndReplaceToDo(System.IAsyncResult result) {
            bool retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndReplaceToDo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReplaceToDoCompleted(object state) {
            if ((this.ReplaceToDoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReplaceToDoCompleted(this, new ReplaceToDoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReplaceToDoAsync(SilverlightApplication1.ServiceReference1.ToDoItem toDoItemToReplace, SilverlightApplication1.ServiceReference1.ToDoItem newToDo, bool throwFaultExceptionIfNotFound) {
            this.ReplaceToDoAsync(toDoItemToReplace, newToDo, throwFaultExceptionIfNotFound, null);
        }
        
        public void ReplaceToDoAsync(SilverlightApplication1.ServiceReference1.ToDoItem toDoItemToReplace, SilverlightApplication1.ServiceReference1.ToDoItem newToDo, bool throwFaultExceptionIfNotFound, object userState) {
            if ((this.onBeginReplaceToDoDelegate == null)) {
                this.onBeginReplaceToDoDelegate = new BeginOperationDelegate(this.OnBeginReplaceToDo);
            }
            if ((this.onEndReplaceToDoDelegate == null)) {
                this.onEndReplaceToDoDelegate = new EndOperationDelegate(this.OnEndReplaceToDo);
            }
            if ((this.onReplaceToDoCompletedDelegate == null)) {
                this.onReplaceToDoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReplaceToDoCompleted);
            }
            base.InvokeAsync(this.onBeginReplaceToDoDelegate, new object[] {
                        toDoItemToReplace,
                        newToDo,
                        throwFaultExceptionIfNotFound}, this.onEndReplaceToDoDelegate, this.onReplaceToDoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginDeleteToDo(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteToDo(toDoItem, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightApplication1.ServiceReference1.IService1.EndDeleteToDo(System.IAsyncResult result) {
            base.Channel.EndDeleteToDo(result);
        }
        
        private System.IAsyncResult OnBeginDeleteToDo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightApplication1.ServiceReference1.ToDoItem toDoItem = ((SilverlightApplication1.ServiceReference1.ToDoItem)(inValues[0]));
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginDeleteToDo(toDoItem, callback, asyncState);
        }
        
        private object[] OnEndDeleteToDo(System.IAsyncResult result) {
            ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndDeleteToDo(result);
            return null;
        }
        
        private void OnDeleteToDoCompleted(object state) {
            if ((this.DeleteToDoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteToDoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteToDoAsync(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem) {
            this.DeleteToDoAsync(toDoItem, null);
        }
        
        public void DeleteToDoAsync(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem, object userState) {
            if ((this.onBeginDeleteToDoDelegate == null)) {
                this.onBeginDeleteToDoDelegate = new BeginOperationDelegate(this.OnBeginDeleteToDo);
            }
            if ((this.onEndDeleteToDoDelegate == null)) {
                this.onEndDeleteToDoDelegate = new EndOperationDelegate(this.OnEndDeleteToDo);
            }
            if ((this.onDeleteToDoCompletedDelegate == null)) {
                this.onDeleteToDoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteToDoCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteToDoDelegate, new object[] {
                        toDoItem}, this.onEndDeleteToDoDelegate, this.onDeleteToDoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginDeleteAllToDos(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAllToDos(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightApplication1.ServiceReference1.IService1.EndDeleteAllToDos(System.IAsyncResult result) {
            base.Channel.EndDeleteAllToDos(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAllToDos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginDeleteAllToDos(callback, asyncState);
        }
        
        private object[] OnEndDeleteAllToDos(System.IAsyncResult result) {
            ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndDeleteAllToDos(result);
            return null;
        }
        
        private void OnDeleteAllToDosCompleted(object state) {
            if ((this.DeleteAllToDosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAllToDosCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAllToDosAsync() {
            this.DeleteAllToDosAsync(null);
        }
        
        public void DeleteAllToDosAsync(object userState) {
            if ((this.onBeginDeleteAllToDosDelegate == null)) {
                this.onBeginDeleteAllToDosDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllToDos);
            }
            if ((this.onEndDeleteAllToDosDelegate == null)) {
                this.onEndDeleteAllToDosDelegate = new EndOperationDelegate(this.OnEndDeleteAllToDos);
            }
            if ((this.onDeleteAllToDosCompletedDelegate == null)) {
                this.onDeleteAllToDosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllToDosCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAllToDosDelegate, null, this.onEndDeleteAllToDosDelegate, this.onDeleteAllToDosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginGetTheNumberOfToDos(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTheNumberOfToDos(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SilverlightApplication1.ServiceReference1.IService1.EndGetTheNumberOfToDos(System.IAsyncResult result) {
            return base.Channel.EndGetTheNumberOfToDos(result);
        }
        
        private System.IAsyncResult OnBeginGetTheNumberOfToDos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginGetTheNumberOfToDos(callback, asyncState);
        }
        
        private object[] OnEndGetTheNumberOfToDos(System.IAsyncResult result) {
            int retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndGetTheNumberOfToDos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTheNumberOfToDosCompleted(object state) {
            if ((this.GetTheNumberOfToDosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTheNumberOfToDosCompleted(this, new GetTheNumberOfToDosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTheNumberOfToDosAsync() {
            this.GetTheNumberOfToDosAsync(null);
        }
        
        public void GetTheNumberOfToDosAsync(object userState) {
            if ((this.onBeginGetTheNumberOfToDosDelegate == null)) {
                this.onBeginGetTheNumberOfToDosDelegate = new BeginOperationDelegate(this.OnBeginGetTheNumberOfToDos);
            }
            if ((this.onEndGetTheNumberOfToDosDelegate == null)) {
                this.onEndGetTheNumberOfToDosDelegate = new EndOperationDelegate(this.OnEndGetTheNumberOfToDos);
            }
            if ((this.onGetTheNumberOfToDosCompletedDelegate == null)) {
                this.onGetTheNumberOfToDosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTheNumberOfToDosCompleted);
            }
            base.InvokeAsync(this.onBeginGetTheNumberOfToDosDelegate, null, this.onEndGetTheNumberOfToDosDelegate, this.onGetTheNumberOfToDosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginGetTheNumberOfToDosPlusX(int x, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTheNumberOfToDosPlusX(x, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Nullable<int> SilverlightApplication1.ServiceReference1.IService1.EndGetTheNumberOfToDosPlusX(System.IAsyncResult result) {
            return base.Channel.EndGetTheNumberOfToDosPlusX(result);
        }
        
        private System.IAsyncResult OnBeginGetTheNumberOfToDosPlusX(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int x = ((int)(inValues[0]));
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginGetTheNumberOfToDosPlusX(x, callback, asyncState);
        }
        
        private object[] OnEndGetTheNumberOfToDosPlusX(System.IAsyncResult result) {
            System.Nullable<int> retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndGetTheNumberOfToDosPlusX(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTheNumberOfToDosPlusXCompleted(object state) {
            if ((this.GetTheNumberOfToDosPlusXCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTheNumberOfToDosPlusXCompleted(this, new GetTheNumberOfToDosPlusXCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTheNumberOfToDosPlusXAsync(int x) {
            this.GetTheNumberOfToDosPlusXAsync(x, null);
        }
        
        public void GetTheNumberOfToDosPlusXAsync(int x, object userState) {
            if ((this.onBeginGetTheNumberOfToDosPlusXDelegate == null)) {
                this.onBeginGetTheNumberOfToDosPlusXDelegate = new BeginOperationDelegate(this.OnBeginGetTheNumberOfToDosPlusX);
            }
            if ((this.onEndGetTheNumberOfToDosPlusXDelegate == null)) {
                this.onEndGetTheNumberOfToDosPlusXDelegate = new EndOperationDelegate(this.OnEndGetTheNumberOfToDosPlusX);
            }
            if ((this.onGetTheNumberOfToDosPlusXCompletedDelegate == null)) {
                this.onGetTheNumberOfToDosPlusXCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTheNumberOfToDosPlusXCompleted);
            }
            base.InvokeAsync(this.onBeginGetTheNumberOfToDosPlusXDelegate, new object[] {
                        x}, this.onEndGetTheNumberOfToDosPlusXDelegate, this.onGetTheNumberOfToDosPlusXCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginGetServerDate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerDate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime SilverlightApplication1.ServiceReference1.IService1.EndGetServerDate(System.IAsyncResult result) {
            return base.Channel.EndGetServerDate(result);
        }
        
        private System.IAsyncResult OnBeginGetServerDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginGetServerDate(callback, asyncState);
        }
        
        private object[] OnEndGetServerDate(System.IAsyncResult result) {
            System.DateTime retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndGetServerDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerDateCompleted(object state) {
            if ((this.GetServerDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerDateCompleted(this, new GetServerDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerDateAsync() {
            this.GetServerDateAsync(null);
        }
        
        public void GetServerDateAsync(object userState) {
            if ((this.onBeginGetServerDateDelegate == null)) {
                this.onBeginGetServerDateDelegate = new BeginOperationDelegate(this.OnBeginGetServerDate);
            }
            if ((this.onEndGetServerDateDelegate == null)) {
                this.onEndGetServerDateDelegate = new EndOperationDelegate(this.OnEndGetServerDate);
            }
            if ((this.onGetServerDateCompletedDelegate == null)) {
                this.onGetServerDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerDateDelegate, null, this.onEndGetServerDateDelegate, this.onGetServerDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginMultiplyThreeNumbers(double x1, double x2, double x3, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMultiplyThreeNumbers(x1, x2, x3, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double SilverlightApplication1.ServiceReference1.IService1.EndMultiplyThreeNumbers(System.IAsyncResult result) {
            return base.Channel.EndMultiplyThreeNumbers(result);
        }
        
        private System.IAsyncResult OnBeginMultiplyThreeNumbers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double x1 = ((double)(inValues[0]));
            double x2 = ((double)(inValues[1]));
            double x3 = ((double)(inValues[2]));
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginMultiplyThreeNumbers(x1, x2, x3, callback, asyncState);
        }
        
        private object[] OnEndMultiplyThreeNumbers(System.IAsyncResult result) {
            double retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndMultiplyThreeNumbers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMultiplyThreeNumbersCompleted(object state) {
            if ((this.MultiplyThreeNumbersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MultiplyThreeNumbersCompleted(this, new MultiplyThreeNumbersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MultiplyThreeNumbersAsync(double x1, double x2, double x3) {
            this.MultiplyThreeNumbersAsync(x1, x2, x3, null);
        }
        
        public void MultiplyThreeNumbersAsync(double x1, double x2, double x3, object userState) {
            if ((this.onBeginMultiplyThreeNumbersDelegate == null)) {
                this.onBeginMultiplyThreeNumbersDelegate = new BeginOperationDelegate(this.OnBeginMultiplyThreeNumbers);
            }
            if ((this.onEndMultiplyThreeNumbersDelegate == null)) {
                this.onEndMultiplyThreeNumbersDelegate = new EndOperationDelegate(this.OnEndMultiplyThreeNumbers);
            }
            if ((this.onMultiplyThreeNumbersCompletedDelegate == null)) {
                this.onMultiplyThreeNumbersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMultiplyThreeNumbersCompleted);
            }
            base.InvokeAsync(this.onBeginMultiplyThreeNumbersDelegate, new object[] {
                        x1,
                        x2,
                        x3}, this.onEndMultiplyThreeNumbersDelegate, this.onMultiplyThreeNumbersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginRoundTripTest(object obj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRoundTripTest(obj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        object SilverlightApplication1.ServiceReference1.IService1.EndRoundTripTest(System.IAsyncResult result) {
            return base.Channel.EndRoundTripTest(result);
        }
        
        private System.IAsyncResult OnBeginRoundTripTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            object obj = ((object)(inValues[0]));
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginRoundTripTest(obj, callback, asyncState);
        }
        
        private object[] OnEndRoundTripTest(System.IAsyncResult result) {
            object retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndRoundTripTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRoundTripTestCompleted(object state) {
            if ((this.RoundTripTestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RoundTripTestCompleted(this, new RoundTripTestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RoundTripTestAsync(object obj) {
            this.RoundTripTestAsync(obj, null);
        }
        
        public void RoundTripTestAsync(object obj, object userState) {
            if ((this.onBeginRoundTripTestDelegate == null)) {
                this.onBeginRoundTripTestDelegate = new BeginOperationDelegate(this.OnBeginRoundTripTest);
            }
            if ((this.onEndRoundTripTestDelegate == null)) {
                this.onEndRoundTripTestDelegate = new EndOperationDelegate(this.OnEndRoundTripTest);
            }
            if ((this.onRoundTripTestCompletedDelegate == null)) {
                this.onRoundTripTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRoundTripTestCompleted);
            }
            base.InvokeAsync(this.onBeginRoundTripTestDelegate, new object[] {
                        obj}, this.onEndRoundTripTestDelegate, this.onRoundTripTestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginRoundTripTest2(object obj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRoundTripTest2(obj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        object SilverlightApplication1.ServiceReference1.IService1.EndRoundTripTest2(System.IAsyncResult result) {
            return base.Channel.EndRoundTripTest2(result);
        }
        
        private System.IAsyncResult OnBeginRoundTripTest2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            object obj = ((object)(inValues[0]));
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginRoundTripTest2(obj, callback, asyncState);
        }
        
        private object[] OnEndRoundTripTest2(System.IAsyncResult result) {
            object retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndRoundTripTest2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRoundTripTest2Completed(object state) {
            if ((this.RoundTripTest2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RoundTripTest2Completed(this, new RoundTripTest2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RoundTripTest2Async(object obj) {
            this.RoundTripTest2Async(obj, null);
        }
        
        public void RoundTripTest2Async(object obj, object userState) {
            if ((this.onBeginRoundTripTest2Delegate == null)) {
                this.onBeginRoundTripTest2Delegate = new BeginOperationDelegate(this.OnBeginRoundTripTest2);
            }
            if ((this.onEndRoundTripTest2Delegate == null)) {
                this.onEndRoundTripTest2Delegate = new EndOperationDelegate(this.OnEndRoundTripTest2);
            }
            if ((this.onRoundTripTest2CompletedDelegate == null)) {
                this.onRoundTripTest2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRoundTripTest2Completed);
            }
            base.InvokeAsync(this.onBeginRoundTripTest2Delegate, new object[] {
                        obj}, this.onEndRoundTripTest2Delegate, this.onRoundTripTest2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginReceiveFaultException(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReceiveFaultException(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightApplication1.ServiceReference1.IService1.EndReceiveFaultException(System.IAsyncResult result) {
            return base.Channel.EndReceiveFaultException(result);
        }
        
        private System.IAsyncResult OnBeginReceiveFaultException(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginReceiveFaultException(callback, asyncState);
        }
        
        private object[] OnEndReceiveFaultException(System.IAsyncResult result) {
            bool retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndReceiveFaultException(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReceiveFaultExceptionCompleted(object state) {
            if ((this.ReceiveFaultExceptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReceiveFaultExceptionCompleted(this, new ReceiveFaultExceptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReceiveFaultExceptionAsync() {
            this.ReceiveFaultExceptionAsync(null);
        }
        
        public void ReceiveFaultExceptionAsync(object userState) {
            if ((this.onBeginReceiveFaultExceptionDelegate == null)) {
                this.onBeginReceiveFaultExceptionDelegate = new BeginOperationDelegate(this.OnBeginReceiveFaultException);
            }
            if ((this.onEndReceiveFaultExceptionDelegate == null)) {
                this.onEndReceiveFaultExceptionDelegate = new EndOperationDelegate(this.OnEndReceiveFaultException);
            }
            if ((this.onReceiveFaultExceptionCompletedDelegate == null)) {
                this.onReceiveFaultExceptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReceiveFaultExceptionCompleted);
            }
            base.InvokeAsync(this.onBeginReceiveFaultExceptionDelegate, null, this.onEndReceiveFaultExceptionDelegate, this.onReceiveFaultExceptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference1.IService1.BeginReceiveServerInternalErrorException(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReceiveServerInternalErrorException(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightApplication1.ServiceReference1.IService1.EndReceiveServerInternalErrorException(System.IAsyncResult result) {
            return base.Channel.EndReceiveServerInternalErrorException(result);
        }
        
        private System.IAsyncResult OnBeginReceiveServerInternalErrorException(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication1.ServiceReference1.IService1)(this)).BeginReceiveServerInternalErrorException(callback, asyncState);
        }
        
        private object[] OnEndReceiveServerInternalErrorException(System.IAsyncResult result) {
            bool retVal = ((SilverlightApplication1.ServiceReference1.IService1)(this)).EndReceiveServerInternalErrorException(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReceiveServerInternalErrorExceptionCompleted(object state) {
            if ((this.ReceiveServerInternalErrorExceptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReceiveServerInternalErrorExceptionCompleted(this, new ReceiveServerInternalErrorExceptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReceiveServerInternalErrorExceptionAsync() {
            this.ReceiveServerInternalErrorExceptionAsync(null);
        }
        
        public void ReceiveServerInternalErrorExceptionAsync(object userState) {
            if ((this.onBeginReceiveServerInternalErrorExceptionDelegate == null)) {
                this.onBeginReceiveServerInternalErrorExceptionDelegate = new BeginOperationDelegate(this.OnBeginReceiveServerInternalErrorException);
            }
            if ((this.onEndReceiveServerInternalErrorExceptionDelegate == null)) {
                this.onEndReceiveServerInternalErrorExceptionDelegate = new EndOperationDelegate(this.OnEndReceiveServerInternalErrorException);
            }
            if ((this.onReceiveServerInternalErrorExceptionCompletedDelegate == null)) {
                this.onReceiveServerInternalErrorExceptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReceiveServerInternalErrorExceptionCompleted);
            }
            base.InvokeAsync(this.onBeginReceiveServerInternalErrorExceptionDelegate, null, this.onEndReceiveServerInternalErrorExceptionDelegate, this.onReceiveServerInternalErrorExceptionCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightApplication1.ServiceReference1.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<SilverlightApplication1.ServiceReference1.IService1>, SilverlightApplication1.ServiceReference1.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<SilverlightApplication1.ServiceReference1.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetToDos(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetToDos", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem> EndGetToDos(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference1.ToDoItem>)(base.EndInvoke("GetToDos", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddOrUpdateToDo(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = toDoItem;
                System.IAsyncResult _result = base.BeginInvoke("AddOrUpdateToDo", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddOrUpdateToDo(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddOrUpdateToDo", _args, result);
            }
            
            public System.IAsyncResult BeginReplaceToDo(SilverlightApplication1.ServiceReference1.ToDoItem toDoItemToReplace, SilverlightApplication1.ServiceReference1.ToDoItem newToDo, bool throwFaultExceptionIfNotFound, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = toDoItemToReplace;
                _args[1] = newToDo;
                _args[2] = throwFaultExceptionIfNotFound;
                System.IAsyncResult _result = base.BeginInvoke("ReplaceToDo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndReplaceToDo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ReplaceToDo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteToDo(SilverlightApplication1.ServiceReference1.ToDoItem toDoItem, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = toDoItem;
                System.IAsyncResult _result = base.BeginInvoke("DeleteToDo", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteToDo(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteToDo", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteAllToDos(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DeleteAllToDos", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteAllToDos(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteAllToDos", _args, result);
            }
            
            public System.IAsyncResult BeginGetTheNumberOfToDos(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTheNumberOfToDos", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetTheNumberOfToDos(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetTheNumberOfToDos", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTheNumberOfToDosPlusX(int x, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = x;
                System.IAsyncResult _result = base.BeginInvoke("GetTheNumberOfToDosPlusX", _args, callback, asyncState);
                return _result;
            }
            
            public System.Nullable<int> EndGetTheNumberOfToDosPlusX(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Nullable<int> _result = ((System.Nullable<int>)(base.EndInvoke("GetTheNumberOfToDosPlusX", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServerDate(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetServerDate", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetServerDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetServerDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMultiplyThreeNumbers(double x1, double x2, double x3, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = x1;
                _args[1] = x2;
                _args[2] = x3;
                System.IAsyncResult _result = base.BeginInvoke("MultiplyThreeNumbers", _args, callback, asyncState);
                return _result;
            }
            
            public double EndMultiplyThreeNumbers(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("MultiplyThreeNumbers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRoundTripTest(object obj, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = obj;
                System.IAsyncResult _result = base.BeginInvoke("RoundTripTest", _args, callback, asyncState);
                return _result;
            }
            
            public object EndRoundTripTest(System.IAsyncResult result) {
                object[] _args = new object[0];
                object _result = ((object)(base.EndInvoke("RoundTripTest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRoundTripTest2(object obj, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = obj;
                System.IAsyncResult _result = base.BeginInvoke("RoundTripTest2", _args, callback, asyncState);
                return _result;
            }
            
            public object EndRoundTripTest2(System.IAsyncResult result) {
                object[] _args = new object[0];
                object _result = ((object)(base.EndInvoke("RoundTripTest2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReceiveFaultException(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ReceiveFaultException", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndReceiveFaultException(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ReceiveFaultException", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReceiveServerInternalErrorException(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ReceiveServerInternalErrorException", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndReceiveServerInternalErrorException(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ReceiveServerInternalErrorException", _args, result)));
                return _result;
            }
        }
    }
}
